What happens when you initialize a repository? Why do you need to do it?

  Initializing a repository tells git that the current directory will be a 
  repository that git has to manage. git will create a .git file to initialize 
  the repository, but it does not add or commit any of the files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area allows you to work on a logical set of changes for a commit, 
  and allows you to choose which files in your working directory you want to add 
  to the repository at which times.

How can you use the staging area to make sure you have one commit per logical
change?

  You can use the staging area to figure out which files in your working directory 
  have changed by running "git diff". From here, you can decide which of those changes
  form a logical change and add them to the staging area together. Then you can use 
  "git diff --staged" to confirm that all of your changes constitute one logical change 
  before you finally make the commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
