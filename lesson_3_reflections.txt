When would you want to use a remote repository rather than keeping all your work
local?

    You would use a remote repository when you want to share your work and make it 
    available, collaborate with other users, or even just collaborate with yourself 
    if you are using multiple machines and want to have your project online so that 
    you can access it from anywhere.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You would want to pull changes manually so that you can work on your bug fix or 
    feature without changes from the remote repository causing conflicts while you 
    work on it. This way you only have to deal with any potential conflicts when 
    you are ready to do so. Another point is that you may not always want the 
    newest code from the remote repository.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Clones are copies of git repositories, either local or remote. Forks are GitHub 
    hosted clones of entire projects. You would use one of these if you wanted to 
    build based on an existing project but do not have permission to modify the 
    original project. Branches are diverging commit paths within a single repository 
    and could be used for developers delivering fixes, features, or just doing 
    exploratory programming, like with a new idea for the architecture of the project.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    By having a copy of the last known state of the remote, Git can keep track of when 
    your changes get ahead of the remote and may need to be pushed. Since 'git fetch' 
    allows you to update your copy of the remote, it also means you can get work done 
    offline without Git having to constantly check the actual remote repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without using Git or GitHub (or some other version control solution), you would 
    have to do a lot of manual file sharing, which would make getting updates, merging 
    changes, and resolving conflicts extremely tedious or even virtually impossible 
    depending on the size and complexity of the project. The easy part of working 
    without Git or GitHub, in theory, would be that you didn't need to think about Git, 
    remember any commands, or run any Git commands as part of your workflow. In practice, 
    this would be very unlikely to be worth it when collaborating with others on a 
    project of non-trivial size.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
